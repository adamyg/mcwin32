# -*- mode: mak; indent-tabs-mode: t; tab-width: 8 -*-
# $Id: Makefile.in,v 1.2 2024/02/27 17:18:08 cvsuser Exp $
# kbtest
#
#
#

@SET_MAKE@
ROOT=		@abs_top_builddir@
top_builddir=	@top_builddir@

# Configuration

PACKAGE=	"mc"
PKG_NAME=	"KBTest"
PKG_VERSION=	1.0.2

# File extensions

E=
O=		.o
A=		.a
LP=		lib

CLEAN=		*.bak *~ *.BAK *.swp *.tmp core *.core a.out
XCLEAN=

# Compilers, programs

CC=		@CC@
CXX=		@CXX@
AR=		@AR@
RANLIB=		@RANLIB@
RM=		@RM@
PERL=		@PERL@
LIBTOOL=	@LIBTOOL@
RC=		@RC@

BUSYBOX=	@BUSYBOX@
ifeq ($(BUSYBOX),busybox)
BUSYBOX=	$(shell which busybox 2>/dev/null)
endif

BUILD_DATE=	$(shell $(BUSYBOX) date +'%Y%m%d')
ifneq ($(APPVEYOR_BUILD_NUMBER),)
BUILD_NUMBER=	$(APPVEYOR_BUILD_NUMBER)
else ifneq ($(GITHUB_RUN_NUMBER),)
BUILD_NUMBER=	$(GITHUB_RUN_NUMBER)
else
BUILD_NUMBER=	$(shell $(BUSYBOX) cat ../../BUILDNUMBER)
endif

# Configuration

ifeq ("$(BUILD_TYPE)","")	#default
BUILD_TYPE=	debug
MAKEFLAGS+=	BUILD_TYPE=debug
endif
ifneq ("$(BUILD_TYPE)","release")
RTSUFFIX=d
endif

QUIETOUT:=	>/dev/null 2>&1
ifeq ($(VERBOSE),1)
QUIETOUT:=
else ifeq ($(VERBOSE),0)
else ifeq ($(VERBOSE),)
else
$(error VERBOSE: unexpected value 0 or 1 required, $(VERBOSE) given]))
endif

# Directories

D_INC=		$(ROOT)/include
D_BIN=		$(ROOT)/bin@TOOLCHAINEXT@/$(BUILD_TYPE)
D_LIB=		$(ROOT)/lib@TOOLCHAINEXT@/$(BUILD_TYPE)
D_OBJ=		$(ROOT)/obj@TOOLCHAINEXT@/$(BUILD_TYPE)/kbtest

# Common flags

XFLAGS=
CFLAGS=		@CFLAGS@
CWARN=		@CWARN@ $(CWALL)
ifeq ("gcc","@CC@")
#CWARN+=	-Wno-shadow -Wno-sign-compare -Wno-type-limits
#CWARN+=	-Wno-unused-variable -Wno-unused-parameter
#CWARN+=	-Wno-unused-parameter -Wno-unused-function
#CWARN+=	-Wno-missing-field-initializers -Wno-implicit-fallthrough
endif
CDEBUG=		@CDEBUG@
CRELEASE=	@CRELEASE@
CXXFLAGS=	@CXXFLAGS@
ifeq ("gcc","@CC@")
CXXFLAGS+=	-fpermissive
endif
CXXDEBUG=	@CXXDEBUG@
ifeq ("$(CXXDEBUG)","")
CXXDEBUG=	$(CDEBUG)
endif
CXXRELEASE=	@CXXRELEASE@
ifeq ("$(CXXRELEASE)","")
CXXRELEASE=	$(CRELEASE)
endif
LDDEBUG=	@LDDEBUG@
LDRELEASE=	@LDRELEASE@

CINCLUDE=	-I$(D_INC) @CINCLUDE@
CEXTRA=		@DEFS@ @LIBCURL_CPPFLAGS@ -DLIBTRE_DLL
ifdef PURIFY
CEXTRA+=	-DUSING_PURIFY
endif
ifeq ("win32","@build_os@")
CEXTRA+=	-DWIN32
endif
CDEPFLAGS=	$(CEXTRA) $(CINCLUDE)

ifeq ("$(BUILD_TYPE)","release")
CFLAGS+=	$(CRELEASE) $(CWARN) $(CINCLUDE) $(CEXTRA) $(XFLAGS)
CXXFLAGS+=	$(CXXRELEASE) $(CXXWARN) $(CINCLUDE) @CXXINCLUDE@ $(CEXTRA) $(XFLAGS)
LDFLAGS=	$(LDRELEASE) @LDFLAGS@
else
CFLAGS+=	$(CDEBUG) $(CWARN) $(CINCLUDE) $(CEXTRA) $(XFLAGS)
CXXFLAGS+=	$(CXXDEBUG) $(CXXWARN) $(CINCLUDE) @CXXINCLUDE@ $(CEXTRA) $(XFLAGS)
LDFLAGS=	$(LDDEBUG) @LDFLAGS@
endif
LDLIBS=		-L$(D_LIB) @LIBS@ @EXTRALIBS@

YFLAGS=		-d
ARFLAGS=	rcv
RMFLAGS=	-f
RMDFLAGS=	-rf


#########################################################################################
# Targets

KBTESTTSK=	$(D_BIN)/kbtest$(E)
KBTESTSRC=	.
ifeq ("owc19","@TOOLCHAIN@")
EXPATSRC=	../../autoupdater/expat_legacy
else
EXPATSRC=	../../autoupdater/libappupdater/expat
endif

VPATH=		$(KBTESTSRC) $(EXPATSRC)

KBTESTOBJS=\
	$(D_OBJ)/kbtest$(O)		\
	$(D_OBJ)/kbconsole$(O)		\
	$(D_OBJ)/kbcurrent$(O)		\
	$(D_OBJ)/kbdefinition$(O)	\
	$(D_OBJ)/kbdump$(O)		\
	$(D_OBJ)/kblayout$(O)		\
	$(D_OBJ)/kbmap$(O)		\
	\
	$(D_OBJ)/xmlparse$(O)		\
	$(D_OBJ)/xmlrole$(O)		\
	$(D_OBJ)/xmltok$(O)

ifeq (mingw,$(findstring mingw,"@TOOLCHAIN@"))
KBTESTOBJS+=	$(D_OBJ)/kbtest_res.o
else
KBTESTOBJS+=	$(D_OBJ)/kbtest.res
endif

OBJS=		$(KBTESTOBJS)
LIBS=
DLLS=
TSKS=		$(KBTESTTSK)
INSTALLED=


#########################################################################################
# Rules

.PHONY:			build release debug
build:			buildinfo $(LIBS) $(DLLS) $(TSKS)

release:
		$(MAKE) BUILD_TYPE=release $(filter-out release, $(MAKECMDGOALS))
debug:
		$(MAKE) BUILD_TYPE=debug $(filter-out debug, $(MAKECMDGOALS))

$(KBTESTTSK):		CEXTRA += -I$(KBTESTSRC) -I$(EXPATSRC)
$(KBTESTTSK):		CEXTRA += -DXML_STATIC -DLIBW32_DYNAMIC -DCOMPILED_FROM_DSP
$(KBTESTTSK):		MAPFILE=$(basename $@).map
$(KBTESTTSK):		$(D_OBJ)/.created $(KBTESTOBJS)
		$(LIBTOOL) --mode=link $(CXX) $(LDFLAGS) -o $@ $(KBTESTOBJS) $(LDLIBS) @LDMAPFILE@

.PHONY:		buildinfo
kbbuildinfo.h:		buildinfo
buildinfo:	Makefile ../../buildinfo.pl
		@echo updating kbbuildinfo.h ...
		-@$(PERL) ../..//buildinfo.pl -o kbbuildinfo.h --package="$(PACKAGE)" --name="$(PKG_NAME)" --version="$(PKG_VERSION)" \
			--date="$(BUILD_DATE)" --build="$(BUILD_NUMBER)" --toolchain="@TOOLCHAINEXT@"

%/.created:
		-@mkdir $(@D)
		@echo "do not delete, managed directory" > $@

clean:
		@echo $(BUILD_TYPE) clean
		-@$(LIBTOOL) --mode=clean $(RM) $(OBJS) $(DLLS) $(DLLOBJS) $(QUIETOUT)
		-@$(RM) $(RMFLAGS) $(BAK) $(TSKS) $(INSTALLED) $(LIBS) $(CLEAN) $(XCLEAN) $(QUIETOUT)
		-@$(RM) $(LIBOBJS) $(QUIETOUT)

$(D_OBJ)/%$(O):		%.cpp
		$(CC) $(CXXFLAGS) -o $@ -c $<

$(D_OBJ)/%$(O):		%.c
		$(CC) $(CFLAGS) -o $@ -c $<

$(D_OBJ)/%.lo:		%.cpp
		$(LIBTOOL) --mode=compile $(CC) $(CXXFLAGS) -o $@ -c $<

$(D_OBJ)/%.lo:		%.c
		$(LIBTOOL) --mode=compile $(CC) $(CFLAGS) -o $@ -c $<

$(D_OBJ)/%.res:		%.rc
		$(RC) -fo $@ $(RCDEFS) $<

$(D_OBJ)/%_res.o:	%.rc
		$(RC) -o $@ $(RCDEFS) $<

#end
