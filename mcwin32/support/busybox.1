BUSYBOX(1)                          busybox                         BUSYBOX(1)

NAME
       BusyBox - The Swiss Army Knife of Embedded Linux

SYNTAX
        busybox <applet> [arguments...]  # or

        <applet> [arguments...]          # if symlinked

DESCRIPTION
       BusyBox combines tiny versions of many common UNIX utilities into a
       single small executable. It provides minimalist replacements for most
       of the utilities you usually find in GNU coreutils, util-linux, etc.
       The utilities in BusyBox generally have fewer options than their full-
       featured GNU cousins; however, the options that are included provide
       the expected functionality and behave very much like their GNU
       counterparts.

       BusyBox has been written with size-optimization and limited resources
       in mind.  It is also extremely modular so you can easily include or
       exclude commands (or features) at compile time. This makes it easy to
       customize your embedded systems. To create a working system, just add
       /dev, /etc, and a Linux kernel.  BusyBox provides a fairly complete
       POSIX environment for any small or embedded system.

       BusyBox is extremely configurable.  This allows you to include only the
       components you need, thereby reducing binary size. Run 'make config' or
       'make menuconfig' to select the functionality that you wish to enable.
       Then run 'make' to compile BusyBox using your configuration.

       After the compile has finished, you should use 'make install' to
       install BusyBox. This will install the 'bin/busybox' binary, in the
       target directory specified by CONFIG_PREFIX. CONFIG_PREFIX can be set
       when configuring BusyBox, or you can specify an alternative location at
       install time (i.e., with a command line like 'make
       CONFIG_PREFIX=/tmp/foo install'). If you enabled any applet
       installation scheme (either as symlinks or hardlinks), these will also
       be installed in the location pointed to by CONFIG_PREFIX.

USAGE
       BusyBox is a multi-call binary.  A multi-call binary is an executable
       program that performs the same job as more than one utility program.
       That means there is just a single BusyBox binary, but that single
       binary acts like a large number of utilities.  This allows BusyBox to
       be smaller since all the built-in utility programs (we call them
       applets) can share code for many common operations.

       You can also invoke BusyBox by issuing a command as an argument on the
       command line.  For example, entering

               /bin/busybox ls

       will also cause BusyBox to behave as 'ls'.

       Of course, adding '/bin/busybox' into every command would be painful.
       So most people will invoke BusyBox using links to the BusyBox binary.

       For example, entering

               ln -s /bin/busybox ls
               ./ls

       will cause BusyBox to behave as 'ls' (if the 'ls' command has been
       compiled into BusyBox).  Generally speaking, you should never need to
       make all these links yourself, as the BusyBox build system will do this
       for you when you run the 'make install' command.

       If you invoke BusyBox with no arguments, it will provide you with a
       list of the applets that have been compiled into your BusyBox binary.

COMMON OPTIONS
       Most BusyBox applets support the --help argument to provide a terse
       runtime description of their behavior.  If the
       CONFIG_FEATURE_VERBOSE_USAGE option has been enabled, more detailed
       usage information will also be available.

COMMANDS
       Currently available applets include:

               [, [[, ar, arch, ash, awk, base64, basename, bash, bunzip2, busybox,
               bzcat, bzip2, cal, cat, chmod, cksum, clear, cmp, comm, cp, cpio,
               cut, date, dc, dd, df, diff, dirname, dos2unix, dpkg-deb, du, echo,
               ed, egrep, env, expand, expr, factor, false, fgrep, find, fold,
               fsync, ftpget, ftpput, getopt, grep, groups, gunzip, gzip, hd, head,
               hexdump, id, ipcalc, kill, killall, less, link, ln, logname, ls,
               lzcat, lzma, lzop, lzopcat, man, md5sum, mkdir, mktemp, mv, nc, nl,
               od, paste, patch, pgrep, pidof, pipe_progress, pkill, printenv,
               printf, ps, pwd, realpath, rev, rm, rmdir, rpm, rpm2cpio, sed, seq,
               sh, sha1sum, sha256sum, sha3sum, sha512sum, shred, shuf, sleep,
               sort, split, ssl_client, stat, strings, sum, tac, tail, tar, tee,
               test, timeout, touch, tr, true, truncate, ttysize, uname,
               uncompress, unexpand, uniq, unix2dos, unlink, unlzma, unlzop, unxz,
               unzip, usleep, uudecode, uuencode, vi, watch, wc, wget, which,
               whoami, whois, xargs, xxd, xz, xzcat, yes, zcat

COMMAND DESCRIPTIONS
       ar  ar [-o] [-v] [-p] [-t] [-x] ARCHIVE FILES

           Extract or list FILES from an ar archive

                   -o      Preserve original dates
                   -p      Extract to stdout
                   -t      List
                   -x      Extract
                   -v      Verbose

       arch
           arch

           Print system architecture

       ash ash [-/+OPTIONS] [-/+o OPT]... [-c 'SCRIPT' [ARG0 [ARGS]] / FILE
           [ARGS] / -s [ARGS]]

           Unix shell interpreter

       awk awk [OPTIONS] [AWK_PROGRAM] [FILE]...

                   -v VAR=VAL      Set variable
                   -F SEP          Use SEP as field separator
                   -f FILE         Read program from FILE
                   -e AWK_PROGRAM

       base64
           base64 [-d] [FILE]

           Base64 encode or decode FILE to standard output      -d   Decode
           data

       basename
           basename FILE [SUFFIX]

           Strip directory path and .SUFFIX from FILE

       bash
           bash [-/+OPTIONS] [-/+o OPT]... [-c 'SCRIPT' [ARG0 [ARGS]] / FILE
           [ARGS] / -s [ARGS]]

           Unix shell interpreter

       bunzip2
           bunzip2 [-cfk] [FILE]...

           Decompress FILEs (or stdin)

                   -c      Write to stdout
                   -f      Force
                   -k      Keep input files

       bzcat
           bzcat [FILE]...

           Decompress to stdout

       bzip2
           bzip2 [OPTIONS] [FILE]...

           Compress FILEs (or stdin) with bzip2 algorithm

                   -1..9   Compression level
                   -d      Decompress
                   -t      Test file integrity
                   -c      Write to stdout
                   -f      Force
                   -k      Keep input files

       cal cal [-jy] [[MONTH] YEAR]

           Display a calendar

                   -j      Use julian dates
                   -y      Display the entire year

       cat cat [-nbvteA] [FILE]...

           Print FILEs to stdout

                   -n      Number output lines
                   -b      Number nonempty lines
                   -v      Show nonprinting characters as ^x or M-x
                   -t      ...and tabs as ^I
                   -e      ...and end lines with $
                   -A      Same as -vte

       chmod
           chmod [-Rcvf] MODE[,MODE]... FILE...

           Each MODE is one or more of the letters ugoa, one of the symbols
           +-= and one or more of the letters rwxst

                   -R      Recurse
                   -c      List changed files
                   -v      List all files
                   -f      Hide errors

       cksum
           cksum FILE...

           Calculate the CRC32 checksums of FILEs

       clear
           clear

           Clear screen

       cmp cmp [-l] [-s] FILE1 [FILE2 [SKIP1 [SKIP2]]]

           Compare FILE1 with FILE2 (or stdin)

                   -l      Write the byte numbers (decimal) and values (octal)
                           for all differing bytes
                   -s      Quiet

       comm
           comm [-123] FILE1 FILE2

           Compare FILE1 with FILE2

                   -1      Suppress lines unique to FILE1
                   -2      Suppress lines unique to FILE2
                   -3      Suppress lines common to both files

       cp  cp [OPTIONS] SOURCE... DEST

           Copy SOURCE(s) to DEST

                   -a      Same as -dpR
                   -R,-r   Recurse
                   -d,-P   Preserve symlinks (default if -R)
                   -L      Follow all symlinks
                   -H      Follow symlinks on command line
                   -p      Preserve file attributes if possible
                   -f      Overwrite
                   -i      Prompt before overwrite
                   -l,-s   Create (sym)links
                   -T      Treat DEST as a normal file
                   -u      Copy only newer files

       cpio
           cpio [-dmvu] [-F FILE] [-R USER[:GRP]] [-H newc] [-tio]
           [EXTR_FILE]...

           Extract (-i) or list (-t) files from a cpio archive, or take file
           list from stdin and create an archive (-o)

           Main operation mode:

                   -t      List
                   -i      Extract EXTR_FILEs (or all)
                   -o      Create (requires -H newc)
           Options:

                   -H newc Archive format
                   -d      Make leading directories
                   -m      Preserve mtime
                   -v      Verbose
                   -u      Overwrite
                   -F FILE Input (-t,-i,-p) or output (-o) file
                   -R USER[:GRP]   Set owner of created files
                   -L      Dereference symlinks
                   -0      Input is separated by NULs

       cut cut [OPTIONS] [FILE]...

           Print selected fields from each input FILE to stdout

                   -b LIST Output only bytes from LIST
                   -c LIST Output only characters from LIST
                   -d CHAR Use CHAR instead of tab as the field delimiter
                   -s      Output only the lines containing delimiter
                   -f N    Print only these fields
                   -n      Ignored

       date
           date [OPTIONS] [+FMT] [TIME]

           Display time (using +FMT), or set time

                   [-s,--set] TIME Set time to TIME
                   -u,--utc        Work in UTC (don't convert to local time)
                   -R,--rfc-2822   Output RFC-2822 compliant date string
                   -I[SPEC]        Output ISO-8601 compliant date string
                                   SPEC='date' (default) for date only,
                                   'hours', 'minutes', or 'seconds' for date and
                                   time to the indicated precision
                   -r,--reference FILE     Display last modification time of FILE
                   -d,--date TIME  Display TIME, not 'now'
                   -D FMT          Use FMT for -d TIME conversion

           Recognized TIME formats:

                   hh:mm[:ss]
                   [YYYY.]MM.DD-hh:mm[:ss]
                   YYYY-MM-DD hh:mm[:ss]
                   [[[[[YY]YY]MM]DD]hh]mm[.ss]
                   'date TIME' form accepts MMDDhhmm[[YY]YY][.ss] instead

       dc  dc EXPRESSION...

           Tiny RPN calculator. Operations: +, add, -, sub, *, mul, /, div, %,
           mod, **, exp, and, or, not, xor, p - print top of the stack
           (without popping), f - print entire stack, o - pop the value and
           set output radix (must be 10, 16, 8 or 2).  Examples: 'dc 2 2 add
           p' -> 4, 'dc 8 8 mul 2 2 + / p' -> 16

       dd  dd [if=FILE] [of=FILE] [ibs=N] [obs=N] [bs=N] [count=N] [skip=N]
                [seek=N] [conv=notrunc|noerror|sync|fsync]
           [iflag=skip_bytes|fullblock]

           Copy a file with converting and formatting

                   if=FILE         Read from FILE instead of stdin
                   of=FILE         Write to FILE instead of stdout
                   bs=N            Read and write N bytes at a time
                   ibs=N           Read N bytes at a time
                   obs=N           Write N bytes at a time
                   count=N         Copy only N input blocks
                   skip=N          Skip N input blocks
                   seek=N          Skip N output blocks
                   conv=notrunc    Don't truncate output file
                   conv=noerror    Continue after read errors
                   conv=sync       Pad blocks with zeros
                   conv=fsync      Physically write data out before finishing
                   conv=swab       Swap every pair of bytes
                   iflag=skip_bytes        skip=N is in bytes
                   iflag=fullblock Read full blocks
                   status=noxfer   Suppress rate output
                   status=none     Suppress all output

           if=/dev/zero and if=/dev/urandom are supported N may be suffixed by
           c (1), w (2), b (512), kB (1000), k (1024), MB, M, GB, G

       df  df [-PkmhT] [FILESYSTEM]...

           Print filesystem usage statistics

                   -P      POSIX output format
                   -k      1024-byte blocks (default)
                   -m      1M-byte blocks
                   -h      Human readable (e.g. 1K 243M 2G)
                   -T      Print filesystem type

       diff
           diff [-abBdiNqrTstw] [-L LABEL] [-S FILE] [-U LINES] FILE1 FILE2

           Compare files line by line and output the differences between them.
           This implementation supports unified diffs only.

                   -a      Treat all files as text
                   -b      Ignore changes in the amount of whitespace
                   -B      Ignore changes whose lines are all blank
                   -d      Try hard to find a smaller set of changes
                   -i      Ignore case differences
                   -L      Use LABEL instead of the filename in the unified header
                   -N      Treat absent files as empty
                   -q      Output only whether files differ
                   -r      Recurse
                   -S      Start with FILE when comparing directories
                   -T      Make tabs line up by prefixing a tab when necessary
                   -s      Report when two files are the same
                   -t      Expand tabs to spaces in output
                   -U      Output LINES lines of context
                   -w      Ignore all whitespace

       dirname
           dirname FILENAME

           Strip non-directory suffix from FILENAME

       dos2unix
           dos2unix [-ud] [FILE]

           Convert FILE in-place from DOS to Unix format.  When no file is
           given, use stdin/stdout.

                   -u      dos2unix
                   -d      unix2dos

       dpkg-deb
           dpkg-deb [-cefxX] FILE [DIR]

           Perform actions on Debian packages (.deb)

                   -c      List files
                   -f      Print control fields
                   -e      Extract control files to DIR (default: ./DEBIAN)
                   -x      Extract files to DIR (no default)
                   -X      Verbose -x

       du  du [-aHLdclsxhmk] [FILE]...

           Summarize disk space used for each FILE and/or directory

                   -a      Show file sizes too
                   -L      Follow all symlinks
                   -H      Follow symlinks on command line
                   -d N    Limit output to directories (and files with -a) of depth < N
                   -c      Show grand total
                   -l      Count sizes many times if hard linked
                   -s      Display only a total for each argument
                   -x      Skip directories on different filesystems
                   -h      Sizes in human readable format (e.g., 1K 243M 2G)
                   -m      Sizes in megabytes
                   -k      Sizes in kilobytes (default)

       echo
           echo [-neE] [ARG]...

           Print the specified ARGs to stdout

                   -n      Suppress trailing newline
                   -e      Interpret backslash escapes (i.e., \t=tab)
                   -E      Don't interpret backslash escapes (default)

       ed  ed [FILE]

       env env [-iu] [-] [name=value]... [PROG ARGS]

           Print the current environment or run PROG after setting up the
           specified environment

                   -, -i   Start with an empty environment
                   -u      Remove variable from the environment

       expand
           expand [-i] [-t N] [FILE]...

           Convert tabs to spaces, writing to stdout

                   -i      Don't convert tabs after non blanks
                   -t      Tabstops every N chars

       expr
           expr EXPRESSION

           Print the value of EXPRESSION to stdout

           EXPRESSION may be:

                   ARG1 | ARG2     ARG1 if it is neither null nor 0, otherwise ARG2
                   ARG1 & ARG2     ARG1 if neither argument is null or 0, otherwise 0
                   ARG1 < ARG2     1 if ARG1 is less than ARG2, else 0. Similarly:
                   ARG1 <= ARG2
                   ARG1 = ARG2
                   ARG1 != ARG2
                   ARG1 >= ARG2
                   ARG1 > ARG2
                   ARG1 + ARG2     Sum of ARG1 and ARG2. Similarly:
                   ARG1 - ARG2
                   ARG1 * ARG2
                   ARG1 / ARG2
                   ARG1 % ARG2
                   STRING : REGEXP         Anchored pattern match of REGEXP in STRING
                   match STRING REGEXP     Same as STRING : REGEXP
                   substr STRING POS LENGTH Substring of STRING, POS counted from 1
                   index STRING CHARS      Index in STRING where any CHARS is found, or 0
                   length STRING           Length of STRING
                   quote TOKEN             Interpret TOKEN as a string, even if
                                           it is a keyword like 'match' or an
                                           operator like '/'
                   (EXPRESSION)            Value of EXPRESSION

           Beware that many operators need to be escaped or quoted for shells.
           Comparisons are arithmetic if both ARGs are numbers, else
           lexicographical. Pattern matches return the string matched between
           \( and \) or null; if \( and \) are not used, they return the
           number of characters matched or 0.

       factor
           factor [NUMBER]...

           Print prime factors

       find
           find [-HL] [PATH]... [OPTIONS] [ACTIONS]

           Search for files and perform actions on them.  First failed action
           stops processing of current file.  Defaults: PATH is current
           directory, action is '-print'

                   -L,-follow      Follow symlinks
                   -H              ...on command line only
                   -maxdepth N     Descend at most N levels. -maxdepth 0 applies
                                   actions to command line arguments only
                   -mindepth N     Don't act on first N levels
                   -depth          Act on directory *after* traversing it

           Actions:

                   ( ACTIONS )     Group actions for -o / -a
                   ! ACT           Invert ACT's success/failure
                   ACT1 [-a] ACT2  If ACT1 fails, stop, else do ACT2
                   ACT1 -o ACT2    If ACT1 succeeds, stop, else do ACT2
                                   Note: -a has higher priority than -o
                   -name PATTERN   Match file name (w/o directory name) to PATTERN
                   -iname PATTERN  Case insensitive -name
                   -path PATTERN   Match path to PATTERN
                   -ipath PATTERN  Case insensitive -path
                   -regex PATTERN  Match path to regex PATTERN
                   -type X         File type is X (one of: f,d,l,b,c,s,p)
                   -executable     File is executable
                   -perm MASK      At least one mask bit (+MASK), all bits (-MASK),
                                   or exactly MASK bits are set in file's mode
                   -mtime DAYS     mtime is greater than (+N), less than (-N),
                                   or exactly N days in the past
                   -mmin MINS      mtime is greater than (+N), less than (-N),
                                   or exactly N minutes in the past
                   -newer FILE     mtime is more recent than FILE's
                   -size N[bck]    File size is N (c:bytes,k:kbytes,b:512 bytes(def.))
                                   +/-N: file size is bigger/smaller than N
                   -prune          If current file is directory, don't descend into it
           If none of the following actions is specified, -print is assumed
                   -print          Print file name
                   -print0         Print file name, NUL terminated
                   -exec CMD ARG ; Run CMD with all instances of {} replaced by
                                   file name. Fails if CMD exits with nonzero
                   -exec CMD ARG + Run CMD with {} replaced by list of file names
                   -delete         Delete current file/directory. Turns on -depth option
                   -quit           Exit

       fold
           fold [-bs] [-w WIDTH] [FILE]...

           Wrap input lines in each FILE (or stdin), writing to stdout

                   -b      Count bytes rather than columns
                   -s      Break at spaces
                   -w      Use WIDTH columns instead of 80

       fsync
           fsync [-d] FILE...

           Write files' buffered blocks to disk

                   -d      Avoid syncing metadata

       ftpget
           ftpget [OPTIONS] HOST [LOCAL_FILE] REMOTE_FILE

           Download a file via FTP

                   -c      Continue previous transfer
                   -v      Verbose
                   -u USER Username
                   -p PASS Password
                   -P NUM  Port

       ftpput
           ftpput [OPTIONS] HOST [REMOTE_FILE] LOCAL_FILE

           Upload a file to a FTP server

                   -v      Verbose
                   -u USER Username
                   -p PASS Password
                   -P NUM  Port number

       getopt
           getopt [OPTIONS] [--] OPTSTRING PARAMS

                   -a              Allow long options starting with single -
                   -l LOPT[,...]   Long options to recognize
                   -n PROGNAME     The name under which errors are reported
                   -o OPTSTRING    Short options to recognize
                   -q              No error messages on unrecognized options
                   -Q              No normal output
                   -s SHELL        Set shell quoting conventions
                   -T              Version test (exits with 4)
                   -u              Don't quote output

           Example:

           O=`getopt -l bb: -- ab:c:: "$@"` || exit 1 eval set -- "$O" while
           true; do      case "$1" in      -a)  echo A; shift;;      -b|--bb)
           echo "B:'$2'"; shift 2;;      -c)  case "$2" in           "")  echo
           C; shift 2;;           *)   echo "C:'$2'"; shift 2;;
                     esac;;      --)  shift; break;;      *)   echo Error;
           exit 1;;      esac done

       grep
           grep [-HhnlLoqvsriwFE] [-m N] [-A/B/C N] PATTERN/-e PATTERN.../-f
           FILE [FILE]...

           Search for PATTERN in FILEs (or stdin)

                   -H      Add 'filename:' prefix
                   -h      Do not add 'filename:' prefix
                   -n      Add 'line_no:' prefix
                   -l      Show only names of files that match
                   -L      Show only names of files that don't match
                   -c      Show only count of matching lines
                   -o      Show only the matching part of line
                   -q      Quiet. Return 0 if PATTERN is found, 1 otherwise
                   -v      Select non-matching lines
                   -s      Suppress open and read errors
                   -r      Recurse
                   -i      Ignore case
                   -w      Match whole words only
                   -x      Match whole lines only
                   -F      PATTERN is a literal (not regexp)
                   -E      PATTERN is an extended regexp
                   -m N    Match up to N times per file
                   -A N    Print N lines of trailing context
                   -B N    Print N lines of leading context
                   -C N    Same as '-A N -B N'
                   -e PTRN Pattern to match
                   -f FILE Read pattern from file

       groups
           groups [USER]

           Print the group memberships of USER or for the current process

       gunzip
           gunzip [-cfkt] [FILE]...

           Decompress FILEs (or stdin)

                   -c      Write to stdout
                   -f      Force
                   -k      Keep input files
                   -t      Test file integrity

       gzip
           gzip [-cfkdt123456789] [FILE]...

           Compress FILEs (or stdin)

                   -1..9   Compression level
                   -d      Decompress
                   -t      Test file integrity
                   -c      Write to stdout
                   -f      Force
                   -k      Keep input files

       hd  hd FILE...

           hd is an alias for hexdump -C

       head
           head [OPTIONS] [FILE]...

           Print first 10 lines of each FILE (or stdin) to stdout.  With more
           than one FILE, precede each with a filename header.

                   -n N[kbm]       Print first N lines
                   -n -N[kbm]      Print all except N last lines
                   -c [-]N[kbm]    Print first N bytes
                   -q              Never print headers
                   -v              Always print headers

           N may be suffixed by k (x1024), b (x512), or m (x1024^2).

       hexdump
           hexdump [-bcCdefnosvxR] [FILE]...

           Display FILEs (or stdin) in a user specified format

                   -b              1-byte octal display
                   -c              1-byte character display
                   -d              2-byte decimal display
                   -o              2-byte octal display
                   -x              2-byte hex display
                   -C              hex+ASCII 16 bytes per line
                   -v              Show all (no dup folding)
                   -e FORMAT_STR   Example: '16/1 "%02x|""\n"'
                   -f FORMAT_FILE
                   -n LENGTH       Show only first LENGTH bytes
                   -s OFFSET       Skip OFFSET bytes
                   -R              Reverse of 'hexdump -Cv'

       id  id [OPTIONS] [USER]

           Print information about USER or the current user

                   -u      User ID
                   -g      Group ID
                   -G      Supplementary group IDs
                   -n      Print names instead of numbers
                   -r      Print real ID instead of effective ID

       ipcalc
           ipcalc [OPTIONS] ADDRESS[/PREFIX] [NETMASK]

           Calculate and display network settings from IP address

                   -b      Broadcast address
                   -n      Network address
                   -m      Default netmask for IP
                   -p      Prefix for IP/NETMASK
                   -h      Resolved host name
                   -s      No error messages

       kill
           kill [-l] [-SIG] PID...

           Send a signal (default: TERM) to given PIDs

                   -l      List all signal names and numbers

       killall
           killall [-l] [-q] [-SIG] PROCESS_NAME...

           Send a signal (default: TERM) to given processes

                   -l      List all signal names and numbers
                   -q      Don't complain if no processes were killed

       less
           less [-EFIMmNSRh~] [FILE]...

           View FILE (or stdin) one screenful at a time

                   -E      Quit once the end of a file is reached
                   -F      Quit if entire file fits on first screen
                   -I      Ignore case in all searches
                   -M,-m   Display status line with line numbers
                           and percentage through the file
                   -N      Prefix line number to each line
                   -S      Truncate long lines
                   -R      Remove color escape codes in input
                   -~      Suppress ~s displayed past EOF

       link
           link FILE LINK

           Create hard LINK to FILE

       ln  ln [OPTIONS] TARGET... LINK|DIR

           Create a link LINK or DIR/TARGET to the specified TARGET(s)

                   -s      Make symlinks instead of hardlinks
                   -f      Remove existing destinations
                   -n      Don't dereference symlinks - treat like normal file
                   -b      Make a backup of the target (if exists) before link operation
                   -S suf  Use suffix instead of ~ when making backup files
                   -T      2nd arg must be a DIR
                   -v      Verbose

       logname
           logname

           Print the name of the current user

       ls  ls [-1AaCxdLHRFplinshrSXvctu] [-w WIDTH] [FILE]...

           List directory contents

                   -1      One column output
                   -a      Include entries which start with .
                   -A      Like -a, but exclude . and ..
                   -x      List by lines
                   -d      List directory entries instead of contents
                   -L      Follow symlinks
                   -H      Follow symlinks on command line
                   -R      Recurse
                   -p      Append / to dir entries
                   -F      Append indicator (one of */=@|) to entries
                   -l      Long listing format
                   -i      List inode numbers
                   -n      List numeric UIDs and GIDs instead of names
                   -s      List allocated blocks
                   -lc     List ctime
                   -lu     List atime
                   --full-time     List full date and time
                   -h      Human readable sizes (1K 243M 2G)
                   --group-directories-first
                   -S      Sort by size
                   -X      Sort by extension
                   -v      Sort by version
                   -t      Sort by mtime
                   -tc     Sort by ctime
                   -tu     Sort by atime
                   -r      Reverse sort order
                   -w N    Format N columns wide
                   --color[={always,never,auto}]   Control coloring

       lzcat
           lzcat [FILE]...

           Decompress to stdout

       lzma
           lzma -d [-cfk] [FILE]...

           Decompress FILE (or stdin)

                   -d      Decompress
                   -c      Write to stdout
                   -f      Force
                   -k      Keep input files

       lzop
           lzop [-cfUvd123456789CF] [FILE]...

                   -1..9   Compression level
                   -d      Decompress
                   -c      Write to stdout
                   -f      Force
                   -U      Delete input files
                   -v      Verbose
                   -F      Don't store or verify checksum
                   -C      Also write checksum of compressed block

       lzopcat
           lzopcat [-vF] [FILE]...

                   -v      Verbose
                   -F      Don't verify checksum

       man man [-aw] [MANPAGE]...

           Format and display manual page

                   -a      Display all pages
                   -w      Show page locations

           $COLUMNS overrides output width

       md5sum
           md5sum [-c[sw]] [FILE]...

           Print or check MD5 checksums

                   -c      Check sums against list in FILEs
                   -s      Don't output anything, status code shows success
                   -w      Warn about improperly formatted checksum lines

       mkdir
           mkdir [OPTIONS] DIRECTORY...

           Create DIRECTORY

                   -m MODE Mode
                   -p      No error if exists; make parent directories as needed

       mktemp
           mktemp [-dt] [-p DIR] [TEMPLATE]

           Create a temporary file with name based on TEMPLATE and print its
           name.  TEMPLATE must end with XXXXXX (e.g. [/dir/]nameXXXXXX).
           Without TEMPLATE, -t tmp.XXXXXX is assumed.

                   -d      Make directory, not file
                   -q      Fail silently on errors
                   -t      Prepend base directory name to TEMPLATE
                   -p DIR  Use DIR as a base directory (implies -t)
                   -u      Do not create anything; print a name

           Base directory is: -p DIR, else $TMPDIR, else /tmp

       mv  mv [-fin] SOURCE DEST or: mv [-fin] SOURCE... DIRECTORY

           Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY

                   -f      Don't prompt before overwriting
                   -i      Interactive, prompt before overwrite
                   -n      Don't overwrite an existing file

       nc  nc [-l] [-p PORT] [IPADDR PORT]

           Open a pipe to IP:PORT

                   -l      Listen mode, for inbound connects
                   -p PORT Local port

       nl  nl [OPTIONS] [FILE]...

           Write FILEs to standard output with line numbers added

                   -b STYLE        Which lines to number - a: all, t: nonempty, n: none
                   -i N            Line number increment
                   -s STRING       Use STRING as line number separator
                   -v N            Start from N
                   -w N            Width of line numbers

       od  od [-abcdfhilovxs] [-t TYPE] [-A RADIX] [-N SIZE] [-j SKIP] [-S
           MINSTR] [-w WIDTH] [FILE]...

           Print FILEs (or stdin) unambiguously, as octal bytes by default

       paste
           paste [OPTIONS] [FILE]...

           Paste lines from each input file, separated with tab

                   -d LIST Use delimiters from LIST, not tab
                   -s      Serial: one file at a time

       patch
           patch [OPTIONS] [ORIGFILE [PATCHFILE]]

                   -p N    Strip N leading components from file names
                   -i DIFF Read DIFF instead of stdin
                   -R      Reverse patch
                   -N      Ignore already applied patches
                   -E      Remove output files if they become empty
                   --dry-run       Don't actually change files

       pgrep
           pgrep [-flanovx] [-s SID|-P PPID|PATTERN]

           Display process(es) selected by regex PATTERN

                   -l      Show command name too
                   -a      Show command line too
                   -f      Match against entire command line
                   -n      Show the newest process only
                   -o      Show the oldest process only
                   -v      Negate the match
                   -x      Match whole name (not substring)
                   -s      Match session ID (0 for current)
                   -P      Match parent process ID

       pidof
           pidof [OPTIONS] [NAME]...

           List PIDs of all processes with names that match NAMEs

                   -s      Show only one PID
                   -o PID  Omit given pid
                           Use %PPID to omit pid of pidof's parent

       pipe_progress
           pipe_progress

           Display a dot to indicate pipe activity

       pkill
           pkill [-l|-SIGNAL] [-fnovx] [-s SID|-P PPID|PATTERN]

           Send a signal to process(es) selected by regex PATTERN

                   -l      List all signals
                   -f      Match against entire command line
                   -n      Signal the newest process only
                   -o      Signal the oldest process only
                   -v      Negate the match
                   -x      Match whole name (not substring)
                   -s      Match session ID (0 for current)
                   -P      Match parent process ID

       printenv
           printenv [VARIABLE]...

           Print environment VARIABLEs.  If no VARIABLE specified, print all.

       printf
           printf FORMAT [ARG]...

           Format and print ARG(s) according to FORMAT (a-la C printf)

       ps  ps [-o COL1,COL2=HEADER]

           Show list of processes

                   -o COL1,COL2=HEADER     Select columns for display

       pwd pwd

           Print the full filename of the current working directory

       realpath
           realpath FILE...

           Return the absolute pathnames of given FILE

       rev rev [FILE]...

           Reverse lines of FILE

       rm  rm [-irf] FILE...

           Remove (unlink) FILEs

                   -i      Always prompt before removing
                   -f      Never prompt
                   -R,-r   Recurse

       rmdir
           rmdir [OPTIONS] DIRECTORY...

           Remove DIRECTORY if it is empty

                   -p      Include parents
                   --ignore-fail-on-non-empty

       rpm rpm -i PACKAGE.rpm; rpm -qp[ildc] PACKAGE.rpm

           Manipulate RPM packages

           Commands:

                   -i      Install package
                   -qp     Query package
                   -qpi    Show information
                   -qpl    List contents
                   -qpd    List documents
                   -qpc    List config files

       rpm2cpio
           rpm2cpio PACKAGE.rpm

           Output a cpio archive of the rpm file

       sed sed [-i[SFX]] [-nrE] [-f FILE]... [-e CMD]... [FILE]...  or: sed
           [-i[SFX]] [-nrE] CMD [FILE]...

                   -e CMD  Add CMD to sed commands to be executed
                   -f FILE Add FILE contents to sed commands to be executed
                   -i[SFX] Edit files in-place (otherwise sends to stdout)
                           Optionally back files up, appending SFX
                   -n      Suppress automatic printing of pattern space
                   -r,-E   Use extended regex syntax
                   -b      Keep CR/LF (Windows-only)

           If no -e or -f, the first non-option argument is the sed command
           string.  Remaining arguments are input files (stdin if none).

       seq seq [-w] [-s SEP] [FIRST [INC]] LAST

           Print numbers from FIRST to LAST, in steps of INC.  FIRST, INC
           default to 1.

                   -w      Pad to last with leading zeros
                   -s SEP  String separator

       sh  sh [-/+OPTIONS] [-/+o OPT]... [-c 'SCRIPT' [ARG0 [ARGS]] / FILE
           [ARGS] / -s [ARGS]]

           Unix shell interpreter

       sha1sum
           sha1sum [-c[sw]] [FILE]...

           Print or check SHA1 checksums

                   -c      Check sums against list in FILEs
                   -s      Don't output anything, status code shows success
                   -w      Warn about improperly formatted checksum lines

       sha256sum
           sha256sum [-c[sw]] [FILE]...

           Print or check SHA256 checksums

                   -c      Check sums against list in FILEs
                   -s      Don't output anything, status code shows success
                   -w      Warn about improperly formatted checksum lines

       sha3sum
           sha3sum [-c[sw]] [-a BITS] [FILE]...

           Print or check SHA3 checksums

                   -c      Check sums against list in FILEs
                   -s      Don't output anything, status code shows success
                   -w      Warn about improperly formatted checksum lines
                   -a BITS 224 (default), 256, 384, 512

       sha512sum
           sha512sum [-c[sw]] [FILE]...

           Print or check SHA512 checksums

                   -c      Check sums against list in FILEs
                   -s      Don't output anything, status code shows success
                   -w      Warn about improperly formatted checksum lines

       shred
           shred FILE...

           Overwrite/delete FILEs

                   -f      Chmod to ensure writability
                   -n N    Overwrite N times (default 3)
                   -z      Final overwrite with zeros
                   -u      Remove file

       shuf
           shuf [-e|-i L-H] [-n NUM] [-o FILE] [-z] [FILE|ARG...]

           Randomly permute lines

                   -e      Treat ARGs as lines
                   -i L-H  Treat numbers L-H as lines
                   -n NUM  Output at most NUM lines
                   -o FILE Write to FILE, not standard output
                   -z      End lines with zero byte, not newline

       sleep
           sleep [N]...

           Pause for a time equal to the total of the args given, where each
           arg can have an optional suffix of (s)econds, (m)inutes, (h)ours,
           or (d)ays

       sort
           sort [-nrugMcszbdfiokt] [-o FILE] [-k
           start[.offset][opts][,end[.offset][opts]] [-t CHAR] [FILE]...

           Sort lines of text

                   -o FILE Output to FILE
                   -c      Check whether input is sorted
                   -b      Ignore leading blanks
                   -f      Ignore case
                   -i      Ignore unprintable characters
                   -d      Dictionary order (blank or alphanumeric only)
                   -n      Sort numbers
                   -g      General numerical sort
                   -M      Sort month
                   -V      Sort version
                   -t CHAR Field separator
                   -k N[,M] Sort by Nth field
                   -r      Reverse sort order
                   -s      Stable (don't sort ties alphabetically)
                   -u      Suppress duplicate lines
                   -z      Lines are terminated by NUL, not newline

       split
           split [OPTIONS] [INPUT [PREFIX]]

                   -b N[k|m]       Split by N (kilo|mega)bytes
                   -l N            Split by N lines
                   -a N            Use N letters as suffix

       ssl_client
           ssl_client [-e] -h handle [-n SNI]

       stat
           stat [OPTIONS] FILE...

           Display file (default) or filesystem status

                   -c FMT  Use the specified format
                   -f      Display filesystem status
                   -L      Follow links
                   -t      Terse display

           FMT sequences for files:

            %a     Access rights in octal
            %A     Access rights in human readable form
            %b     Number of blocks allocated (see %B)
            %B     Size in bytes of each block reported by %b
            %d     Device number in decimal
            %D     Device number in hex
            %f     Raw mode in hex
            %F     File type
            %g     Group ID
            %G     Group name
            %h     Number of hard links
            %i     Inode number
            %n     File name
            %N     File name, with -> TARGET if symlink
            %o     I/O block size
            %s     Total size in bytes
            %t     Major device type in hex
            %T     Minor device type in hex
            %u     User ID
            %U     User name
            %x     Time of last access
            %X     Time of last access as seconds since Epoch
            %y     Time of last modification
            %Y     Time of last modification as seconds since Epoch
            %z     Time of last change
            %Z     Time of last change as seconds since Epoch

           FMT sequences for file systems:

            %a     Free blocks available to non-superuser
            %b     Total data blocks
            %c     Total file nodes
            %d     Free file nodes
            %f     Free blocks
            %i     File System ID in hex
            %l     Maximum length of filenames
            %n     File name
            %s     Block size (for faster transfer)
            %S     Fundamental block size (for block counts)
            %t     Type in hex
            %T     Type in human readable form

       strings
           strings [-fo] [-t o/d/x] [-n LEN] [FILE]...

           Display printable strings in a binary file

                   -f              Precede strings with filenames
                   -o              Precede strings with octal offsets
                   -t o/d/x        Precede strings with offsets in base 8/10/16
                   -n LEN          At least LEN characters form a string (default 4)

       sum sum [-rs] [FILE]...

           Checksum and count the blocks in a file

                   -r      Use BSD sum algorithm (1K blocks)
                   -s      Use System V sum algorithm (512byte blocks)

       tac tac [FILE]...

           Concatenate FILEs and print them in reverse

       tail
           tail [OPTIONS] [FILE]...

           Print last 10 lines of each FILE (or stdin) to stdout.  With more
           than one FILE, precede each with a filename header.

                   -f              Print data as file grows
                   -c [+]N[kbm]    Print last N bytes
                   -n N[kbm]       Print last N lines
                   -n +N[kbm]      Start on Nth line and print the rest
                   -q              Never print headers
                   -s SECONDS      Wait SECONDS between reads with -f
                   -v              Always print headers
                   -F              Same as -f, but keep retrying

           N may be suffixed by k (x1024), b (x512), or m (x1024^2).

       tar tar c|x|t [-ZzJjahmvokO] [-f TARFILE] [-C DIR] [-T FILE] [-X FILE]
           [--exclude PATTERN]... [FILE]...

           Create, extract, or list files from a tar file

                   c       Create
                   x       Extract
                   t       List
                   -f FILE Name of TARFILE ('-' for stdin/out)
                   -C DIR  Change to DIR before operation
                   -v      Verbose
                   -O      Extract to stdout
                   -m      Don't restore mtime
                   -o      Don't restore user:group
                   -k      Don't replace existing files
                   -Z      (De)compress using compress
                   -z      (De)compress using gzip
                   -J      (De)compress using xz
                   -j      (De)compress using bzip2
                   -a      (De)compress using lzma
                   -h      Follow symlinks
                   -T FILE File with names to include
                   -X FILE File with glob patterns to exclude
                   --exclude PATTERN       Glob pattern to exclude

       tee tee [-ai] [FILE]...

           Copy stdin to each FILE, and also to stdout

                   -a      Append to the given FILEs, don't overwrite
                   -i      Ignore interrupt signals (SIGINT)

       timeout
           timeout [-s SIG] SECS PROG ARGS

           Runs PROG. Sends SIG to it if it is not gone in SECS seconds.
           Default SIG: TERM.

       touch
           touch [-c] [-d DATE] [-t DATE] [-r FILE] FILE...

           Update the last-modified date on the given FILE[s]

                   -c      Don't create files
                   -d DT   Date/time to use
                   -t DT   Date/time to use
                   -r FILE Use FILE's date/time

       tr  tr [-cds] STRING1 [STRING2]

           Translate, squeeze, or delete characters from stdin, writing to
           stdout

                   -c      Take complement of STRING1
                   -d      Delete input characters coded STRING1
                   -s      Squeeze multiple output characters of STRING2 into one character

       truncate
           truncate [-c] -s SIZE FILE...

           Truncate FILEs to the given size

                   -c      Do not create files
                   -s SIZE Truncate to SIZE

       ttysize
           ttysize [w] [h]

           Print dimensions of stdin tty, or 80x24

       uname
           uname [-amnrspvio]

           Print system information

                   -a      Print all
                   -m      The machine (hardware) type
                   -n      Hostname
                   -r      Kernel release
                   -s      Kernel name (default)
                   -p      Processor type
                   -v      Kernel version
                   -i      The hardware platform
                   -o      OS name

       uncompress
           uncompress [-cf] [FILE]...

           Decompress .Z file[s]

                   -c      Write to stdout
                   -f      Overwrite

       unexpand
           unexpand [-fa][-t N] [FILE]...

           Convert spaces to tabs, writing to stdout

                   -a      Convert all blanks
                   -f      Convert only leading blanks
                   -t N    Tabstops every N chars

       uniq
           uniq [-cdu][-f,s,w N] [INPUT [OUTPUT]]

           Discard duplicate lines

                   -c      Prefix lines by the number of occurrences
                   -d      Only print duplicate lines
                   -u      Only print unique lines
                   -i      Ignore case
                   -f N    Skip first N fields
                   -s N    Skip first N chars (after any skipped fields)
                   -w N    Compare N characters in line

       unix2dos
           unix2dos [-ud] [FILE]

           Convert FILE in-place from Unix to DOS format.  When no file is
           given, use stdin/stdout.

                   -u      dos2unix
                   -d      unix2dos

       unlink
           unlink FILE

           Delete FILE by calling unlink()

       unlzma
           unlzma [-cfk] [FILE]...

           Decompress FILE (or stdin)

                   -c      Write to stdout
                   -f      Force
                   -k      Keep input files

       unlzop
           unlzop [-cfUvF] [FILE]...

                   -c      Write to stdout
                   -f      Force
                   -U      Delete input files
                   -v      Verbose
                   -F      Don't verify checksum

       unxz
           unxz [-cfk] [FILE]...

           Decompress FILE (or stdin)

                   -c      Write to stdout
                   -f      Force
                   -k      Keep input files

       unzip
           unzip [-lnojpq] FILE[.zip] [FILE]... [-x FILE...] [-d DIR]

           Extract FILEs from ZIP archive

                   -l      List contents (with -q for short form)
                   -n      Never overwrite files (default: ask)
                   -o      Overwrite
                   -j      Do not restore paths
                   -p      Print to stdout
                   -q      Quiet
                   -x FILE Exclude FILEs
                   -d DIR  Extract into DIR

       usleep
           usleep N

           Pause for N microseconds

       uudecode
           uudecode [-o OUTFILE] [INFILE]

           Uudecode a file Finds OUTFILE in uuencoded source unless -o is
           given

       uuencode
           uuencode [-m] [FILE] STORED_FILENAME

           Uuencode FILE (or stdin) to stdout

                   -m      Use base64 encoding per RFC1521

       vi  vi [OPTIONS] [FILE]...

           Edit FILE

                   -c CMD  Initial command to run ($EXINIT also available)
                   -R      Read-only
                   -H      List available features

       watch
           watch [-n SEC] [-t] PROG ARGS

           Run PROG periodically

                   -n      Loop period in seconds (default 2)
                   -t      Don't print header

       wc  wc [-clwL] [FILE]...

           Count lines, words, and bytes for each FILE (or stdin)

                   -c      Count bytes
                   -l      Count newlines
                   -w      Count words
                   -L      Print longest line length

       wget
           wget [-c|--continue] [--spider] [-q|--quiet] [-O|--output-document
           FILE]      [--header 'header: value'] [-Y|--proxy on/off] [-P DIR]
                [-S|--server-response] [-U|--user-agent AGENT] URL...

           Retrieve files via HTTP or FTP

                   --spider        Only check URL existence: $? is 0 if exists
                   -c              Continue retrieval of aborted transfer
                   -q              Quiet
                   -P DIR          Save to DIR (default .)
                   -S              Show server response
                   -O FILE         Save to FILE ('-' for stdout)
                   -U STR          Use STR for User-Agent header
                   -Y on/off       Use proxy

       which
           which [COMMAND]...

           Locate a COMMAND

       whoami
           whoami

           Print the user name associated with the current effective user id

       whois
           whois [-i] [-h SERVER] [-p PORT] NAME...

           Query WHOIS info about NAME

                   -i      Show redirect results too
                   -h,-p   Server to query

       xargs
           xargs [OPTIONS] [PROG ARGS]

           Run PROG on every item given by stdin

                   -p      Ask user whether to run each command
                   -r      Don't run command if input is empty
                   -0      Input is separated by NULs
                   -a FILE Read from FILE instead of stdin
                   -t      Print the command on stderr before execution
                   -e[STR] STR stops input processing
                   -n N    Pass no more than N args to PROG
                   -s N    Pass command line of no more than N bytes
                   -I STR  Replace STR within PROG ARGS with input line
                   -P N    Run up to N PROGs in parallel
                   -x      Exit if size is exceeded

       xxd xxd [OPTIONS] [FILE]

           Hex dump FILE (or stdin)

                   -g N            Bytes per group
                   -c N            Bytes per line
                   -p              Show only hex bytes, assumes -c30
                   -l LENGTH       Show only first LENGTH bytes
                   -s OFFSET       Skip OFFSET bytes

       xz  xz -d [-cfk] [FILE]...

           Decompress FILE (or stdin)

                   -d      Decompress
                   -c      Write to stdout
                   -f      Force
                   -k      Keep input files

       xzcat
           xzcat [FILE]...

           Decompress to stdout

       yes yes [STRING]

           Repeatedly output a line with STRING, or 'y'

       zcat
           zcat [FILE]...

           Decompress to stdout

LIBC NSS
       GNU Libc (glibc) uses the Name Service Switch (NSS) to configure the
       behavior of the C library for the local environment, and to configure
       how it reads system data, such as passwords and group information.
       This is implemented using an /etc/nsswitch.conf configuration file, and
       using one or more of the /lib/libnss_* libraries.  BusyBox tries to
       avoid using any libc calls that make use of NSS.  Some applets however,
       such as login and su, will use libc functions that require NSS.

       If you enable CONFIG_USE_BB_PWD_GRP, BusyBox will use internal
       functions to directly access the /etc/passwd, /etc/group, and
       /etc/shadow files without using NSS.  This may allow you to run your
       system without the need for installing any of the NSS configuration
       files and libraries.

       When used with glibc, the BusyBox 'networking' applets will similarly
       require that you install at least some of the glibc NSS stuff (in
       particular, /etc/nsswitch.conf, /lib/libnss_dns*, /lib/libnss_files*,
       and /lib/libresolv*).

       Shameless Plug: As an alternative, one could use a C library such as
       uClibc.  In addition to making your system significantly smaller,
       uClibc does not require the use of any NSS support files or libraries.

MAINTAINER
       Denis Vlasenko <vda.linux@googlemail.com>

AUTHORS
       The following people have contributed code to BusyBox whether they know
       it or not.  If you have written code included in BusyBox, you should
       probably be listed here so you can obtain your bit of eternal glory.
       If you should be listed here, or the description of what you have done
       needs more detail, or is incorrect, please send in an update.

       Emanuele Aina <emanuele.aina@tiscali.it>
           run-parts

       Erik Andersen <andersen@codepoet.org>

           Tons of new stuff, major rewrite of most of the
           core apps, tons of new apps as noted in header files.
           Lots of tedious effort writing these boring docs that
           nobody is going to actually read.

       Laurence Anderson <l.d.anderson@warwick.ac.uk>

           rpm2cpio, unzip, get_header_cpio, read_gz interface, rpm

       Jeff Angielski <jeff@theptrgroup.com>

           ftpput, ftpget

       Edward Betts <edward@debian.org>

           expr, hostid, logname, whoami

       John Beppu <beppu@codepoet.org>

           du, nslookup, sort

       Brian Candler <B.Candler@pobox.com>

           tiny-ls(ls)

       Randolph Chung <tausq@debian.org>

           fbset, ping, hostname

       Dave Cinege <dcinege@psychosis.com>

           more(v2), makedevs, dutmp, modularization, auto links file,
           various fixes, Linux Router Project maintenance

       Jordan Crouse <jordan@cosmicpenguin.net>

           ipcalc

       Magnus Damm <damm@opensource.se>

           tftp client insmod powerpc support

       Larry Doolittle <ldoolitt@recycle.lbl.gov>

           pristine source directory compilation, lots of patches and fixes.

       Glenn Engel <glenne@engel.org>

           httpd

       Gennady Feldman <gfeldman@gena01.com>

           Sysklogd (single threaded syslogd, IPC Circular buffer support,
           logread), various fixes.

       Karl M. Hegbloom <karlheg@debian.org>

           cp_mv.c, the test suite, various fixes to utility.c, &c.

       Daniel Jacobowitz <dan@debian.org>

           mktemp.c

       Matt Kraai <kraai@alumni.cmu.edu>

           documentation, bugfixes, test suite

       Stephan Linz <linz@li-pro.net>

           ipcalc, Red Hat equivalence

       John Lombardo <john@deltanet.com>

           tr

       Glenn McGrath <bug1@iinet.net.au>

           Common unarchiving code and unarchiving applets, ifupdown, ftpgetput,
           nameif, sed, patch, fold, install, uudecode.
           Various bugfixes, review and apply numerous patches.

       Manuel Novoa III <mjn3@codepoet.org>

           cat, head, mkfifo, mknod, rmdir, sleep, tee, tty, uniq, usleep, wc, yes,
           mesg, vconfig, make_directory, parse_mode, dirname, mode_string,
           get_last_path_component, simplify_path, and a number trivial libbb routines

           also bug fixes, partial rewrites, and size optimizations in
           ash, basename, cal, cmp, cp, df, du, echo, env, ln, logname, md5sum, mkdir,
           mv, realpath, rm, sort, tail, touch, uname, watch, arith, human_readable,
           interface, dutmp, ifconfig, route

       Vladimir Oleynik <dzo@simtreas.ru>

           cmdedit; xargs(current), httpd(current);
           ports: ash, crond, fdisk, inetd, stty, traceroute, top;
           locale, various fixes
           and irreconcilable critic of everything not perfect.

       Bruce Perens <bruce@pixar.com>

           Original author of BusyBox in 1995, 1996. Some of his code can
           still be found hiding here and there...

       Tim Riker <Tim@Rikers.org>

           bug fixes, member of fan club

       Kent Robotti <robotti@metconnect.com>

           reset, tons and tons of bug reports and patches.

       Chip Rosenthal <chip@unicom.com>, <crosenth@covad.com>

           wget - Contributed by permission of Covad Communications

       Pavel Roskin <proski@gnu.org>

           Lots of bugs fixes and patches.

       Gyepi Sam <gyepi@praxis-sw.com>

           Remote logging feature for syslogd

       Linus Torvalds <torvalds@transmeta.com>

           mkswap, fsck.minix, mkfs.minix

       Mark Whitley <markw@codepoet.org>

           grep, sed, cut, xargs(previous),
           style-guide, new-applet-HOWTO, bug fixes, etc.

       Charles P. Wright <cpwright@villagenet.com>

           gzip, mini-netcat(nc)

       Enrique Zanardi <ezanardi@ull.es>

           tarcat (since removed), loadkmap, various fixes, Debian maintenance

       Tito Ragusa <farmatito@tiscali.it>

           devfsd and size optimizations in strings, openvt and deallocvt.

       Paul Fox <pgf@foxharp.boston.ma.us>

           vi editing mode for ash, various other patches/fixes

       Roberto A. Foglietta <me@roberto.foglietta.name>

           port: dnsd

       Bernhard Reutner-Fischer <rep.dot.nop@gmail.com>

           misc

       Mike Frysinger <vapier@gentoo.org>

           initial e2fsprogs, printenv, setarch, sum, misc

       Jie Zhang <jie.zhang@analog.com>

           fixed two bugs in msh and hush (exitcode of killed processes)

version 1.30.0-FRP-2358-g25a1bcec72018-09-11                        BUSYBOX(1)
