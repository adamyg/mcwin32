# -*- mode: mak; indent-tabs-mode: t; tab-width: 8 -*-
# $Id: Makefile.in.2_13_0,v 1.2 2021/11/08 13:12:23 cvsuser Exp $
# libmbedtls makefile.
#
#
# Copyright (c) 2017 - 2020 Adam Young.
# All rights reserved.
#
# This file is part of the WinRSH/WinSSH project.
#
# The WinRSH/WinSSH project is free software: you can redistribute it
# and/or modify it under the terms of the WinRSH/WinSSH project License.
#
# Redistributions of source code must retain the above copyright
# notice, and must be distributed with the license document above.
#
# Redistributions in binary form must reproduce the above copyright
# notice, and must include the license document above in
# the documentation and/or other materials provided with the
# distribution.
#
# The WinRSH/WinSSH project is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# License for more details.
# ==end==
#

@SET_MAKE@
top_builddir=	@top_builddir@

# File extensions

E=
O=		.o
H=		.h
A=		.a
LP=		lib

CLEAN=		*.bak *~ *.BAK *.swp *.tmp core *.core a.out
XCLEAN=

# Compilers, programs

CC=		@CC@
AR=		@AR@
RANLIB=		@RANLIB@
RM=		@RM@
PERL=		@PERL@
LIBTOOL=	@LIBTOOL@
RC=		@RC@

# Common flags

ARFLAGS=	rcv
XFLAGS=		
COPT=		@CFLAGS@
CXXOPT=		@CXXFLAGS@
ifeq "" "$(CXXOPT)"
CXXOPT=		$(COPT)
endif
CWARN=		@CWARN@
CDEBUG=		@CDEBUG@
LDEBUG=		@LDEBUG@
CINCLUDE=	-I. -I$(D_INC) @CINCLUDE@
CEXTRA=		@DEFS@
CFLAGS=		$(CPPFLAGS) $(CDEBUG) $(COPT) $(CWARN) $(CEXTRA) $(CINCLUDE) $(XFLAGS)
CXXFLAGS=	$(CPPFLAGS) $(CDEBUG) $(CXXOPT) $(CWARN) $(CEXTRA) $(CINCLUDE) $(XFLAGS)
YFLAGS=		-d
LDFLAGS=	$(LDEBUG) @LDFLAGS@
LDLIBS=		-L$(D_LIB) @LIBS@ @EXTRALIBS@

RMFLAGS=	-f

# Directories

D_BIN=		$(top_builddir)/bin@TOOLCHAINEXT@
D_INC=		$(top_builddir)/include
D_OBJ=		$(top_builddir)/objects@TOOLCHAINEXT@/libmbedtls
D_LIB=		$(top_builddir)/lib@TOOLCHAINEXT@

############################################################

# Targets

MBEDCRYPTOLIB=	$(D_LIB)/$(LP)mbedcrypto_static$(A)
MBEDCRYPTODLL=	$(D_LIB)/$(LP)mbedcrypto.la

MBEDX509LIB=	$(D_LIB)/$(LP)mbedx509_static$(A)
MBEDX509DLL=	$(D_LIB)/$(LP)mbedx509.la

MBEDTLSLIB=	$(D_LIB)/$(LP)mbedtls_static$(A)
MBEDTLSDLL=	$(D_LIB)/$(LP)mbedtls.la

VERSION=	2.13.0
VERSION_1	=$(word 1,$(subst ., ,$(VERSION)))
VERSION_2	=$(word 2,$(subst ., ,$(VERSION)))
VERSION_3	=$(word 3,$(subst ., ,$(VERSION)))
VERSIONSPEC=	$(subst .,:,$(VERSION))
VERPACKED=	mbedtls-$(VERSION)-apache.gr.tgz

MBEDBASE=	./mbedtls-$(VERSION)
MBEDSRC=	$(MBEDBASE)/library
MBEDINCLUDE=	$(MBEDBASE)/include

CINCLUDE+=	-I./win32 -I$(MBEDINCLUDE)
CEXTRA+=	-D_WIN32_WINNT=0x601 -DLIBMBED_WIN32 -DLIBMBED_HAVE_ZLIB

VPATH+=		$(MBEDSRC) $(MBEDBASE)/programs/test ./win32

CRYPTO_SOURCES=	aes.c			aesni.c			arc4.c		\
		aria.c			asn1parse.c		asn1write.c	\
		base64.c		bignum.c		blowfish.c	\
		camellia.c		ccm.c			chacha20.c	\
		chachapoly.c		cipher.c		cipher_wrap.c	\
		cmac.c			ctr_drbg.c		des.c		\
		dhm.c			ecdh.c			ecdsa.c		\
		ecjpake.c		ecp.c					\
		ecp_curves.c		entropy.c		entropy_poll.c	\
		error.c			gcm.c			havege.c	\
		hkdf.c								\
		hmac_drbg.c		md.c			md2.c		\
		md4.c			md5.c			md_wrap.c	\
		memory_buffer_alloc.c				nist_kw.c	\
		oid.c			padlock.c		pem.c		\
		pk.c			pk_wrap.c		pkcs12.c	\
		pkcs5.c			pkparse.c		pkwrite.c	\
		platform.c		platform_util.c		poly1305.c	\
		ripemd160.c		rsa_internal.c		rsa.c  		\
		sha1.c			sha256.c		sha512.c	\
		threading.c		timing.c		version.c	\
		version_features.c	xtea.c

X509_SOURCES=	certs.c			pkcs11.c		x509.c		\
		x509_create.c		x509_crl.c		x509_crt.c	\
		x509_csr.c		x509write_crt.c		x509write_csr.c

TLS_SOURCES=	debug.c			net_sockets.c		\
		ssl_cache.c		ssl_ciphersuites.c	\
		ssl_cli.c		ssl_cookie.c		\
		ssl_srv.c		ssl_ticket.c		\
		ssl_tls.c

CRYPTO_LIBOBJS=\
	$(addprefix $(D_OBJ)/,$(subst .c,$(O),$(CRYPTO_SOURCES)))
CRYPTO_DLLOBJS=\
	$(subst $(O),.lo,$(CRYPTO_LIBOBJS))			\
	$(D_OBJ)/crypto_globals.lo
ifeq ("mingw32","win32")
CRYPTO_DLLOBJS+=$(D_OBJ)/libmbedtls_res.o
else ifeq ("win32","win32")
CRYPTO_DLLOBJS+=$(D_OBJ)/libmbedtls.res
endif

X509_LIBOBJS=\
	$(addprefix $(D_OBJ)/,$(subst .c,$(O),$(X509_SOURCES)))
X509_DLLOBJS=\
	$(subst $(O),.lo,$(X509_LIBOBJS))			\
	$(D_OBJ)/x509_globals.lo
ifeq ("mingw32","win32")
X509_DLLOBJS+=	$(D_OBJ)/libmbedtls_res.o
else ifeq ("win32","win32")
X509_DLLOBJS+=	$(D_OBJ)/libmbedtls.res
endif

TLS_LIBOBJS=\
	$(addprefix $(D_OBJ)/,$(subst .c,$(O),$(TLS_SOURCES)))
TLS_DLLOBJS=\
	$(subst $(O),.lo,$(TLS_LIBOBJS))
ifeq ("mingw32","win32")
TLS_DLLOBJS+=	$(D_OBJ)/libmbedtls_res.o
else ifeq ("win32","win32")
TLS_DLLOBJS+=	$(D_OBJ)/libmbedtls.res
endif

LIBOBJS=	$(CRYPTO_LIBOBJS)	\
		$(X509_LIBOBJS)		\
		$(TLS_LIBOBJS)		

DLLOBJS=	$(CRYPTO_DLLOBJS)	\
		$(X509_DLLOBJS)		\
		$(TLS_DLLOBJS)

LIBS=		$(MBEDCRYPTOLIB)	\
		$(MBEDX509LIB)		\
		$(MBEDTLSLIB)

DLLS=		$(MBEDCRYPTODLL)	\
		$(MBEDX509DLL)		\
		$(MBEDTLSDLL)

TARGET=		mbedtls_selftest$(E)
TARGETOBJS=	$(D_OBJ)/selftest.obj

TSKS=		$(D_BIN)/$(TARGET)

# Rules

all:			source unpacked
unpacked:		object $(LIBS) $(DLLS) $(TSKS) installinc

CEXTRA		+= -D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE -D__STDC_WANT_LIB_EXT1__=1

#######
$(MBEDCRYPTOLIB):	CEXTRA += -DLIBMBED_STATIC -DLIBMBEDCRYPTO_SOURCE
$(MBEDCRYPTOLIB):	$(CRYPTO_LIBOBJS)
		$(RM) $(RMFLAGS) $@ >/dev/null 2>&1
		$(AR) $(ARFLAGS) $@ $^
		$(RANLIB) $@

$(MBEDCRYPTODLL):	LIBNAME=libmbedcrypto
$(MBEDCRYPTODLL):	LIBDEF=-export-symbols win32/libmbedcrypto.def
$(MBEDCRYPTODLL):	CEXTRA += -DLIBMBED_DYNAMIC -DLIBMBEDCRYPTO_SOURCE -D_WINDLL
$(MBEDCRYPTODLL):	$(CRYPTO_DLLOBJS)
		$(LIBTOOL) --mode=link $(CC) $(LDFLAGS) -version-number $(VERSIONSPEC) \
			-rpath $(D_LIB) -bindir $(D_BIN) $(LIBDEF) -o $@ $^ $(LDLIBS)

#######
$(MBEDX509LIB):		CEXTRA += -DLIBMBED_STATIC -DLIBMBEDX509_SOURCE -DLIBMBEDX509
$(MBEDX509LIB):		$(X509_LIBOBJS)
		$(RM) $(RMFLAGS) $@ >/dev/null 2>&1
		$(AR) $(ARFLAGS) $@ $^
		$(RANLIB) $@

$(MBEDX509DLL):		LIBNAME=libmbedx509
$(MBEDX509DLL):		LIBDEF=-export-symbols win32/libmbedx509.def
$(MBEDX509DLL):		CEXTRA += -DLIBMBED_DYNAMIC -DLIBMBEDX509_SOURCE -D_WINDLL
$(MBEDX509DLL):		$(X509_DLLOBJS)
		$(LIBTOOL) --mode=link $(CC) $(LDFLAGS) -version-number $(VERSIONSPEC) \
			-rpath $(D_LIB) -bindir $(D_BIN) $(LIBDEF) -o $@ $^ -llibmbedcrypto $(LDLIBS)

#######
$(MBEDTLSLIB):		CEXTRA += -DLIBMBED_STATIC -DLIBMBEDTLS_SOURCE
$(MBEDTLSLIB):		$(TLS_LIBOBJS)
		$(RM) $(RMFLAGS) $@ >/dev/null 2>&1
		$(AR) $(ARFLAGS) $@ $^
		$(RANLIB) $@

$(MBEDTLSDLL):		LIBNAME=libmbedtls
$(MBEDTLSDLL):		LIBDEF=-export-symbols win32/libmbedtls.def
$(MBEDTLSDLL):		CEXTRA += -DLIBMBED_DYNAMIC -DLIBMBEDTLS_SOURCE -DLIBMBEDTLS -D_WINDLL
$(MBEDTLSDLL):		$(TLS_DLLOBJS)
		$(LIBTOOL) --mode=link $(CC) $(LDFLAGS) -version-number $(VERSIONSPEC) \
			-rpath $(D_LIB) -bindir $(D_BIN) $(LIBDEF) -o $@ $^ -llibmbedcrypto -llibmbedx509 $(LDLIBS)

#######
$(D_BIN)/$(TARGET):	MAPFILE=$(basename $@).map
$(D_BIN)/$(TARGET):	$(D_OBJ)/.created $(TARGETOBJS)
		$(CC) $(LDFLAGS) -o $@ $(TARGETOBJS) $(LDFLAGS) -llibmbedtls -llibmbedcrypto -llibmbedx509 @LDMAPFILE@ $(LDLIBS)

#######
source:			.unpacked.$(VERSION)
		$(MAKE) unpacked

.unpacked.$(VERSION):	$(VERPACKED)
		@echo "do not delete, managed file" > $@
		@echo "unpacking source $VERPACKED"
		@gzip -c -d $(VERPACKED) | tar -xvf -

.PHONY:		object
object:			$(D_OBJ)/.created

.PHONY:		installinc
installinc:		../include/.created ../include/mbedtls/.created
		@echo publishing headers ...
		-cp $(MBEDINCLUDE)/mbedtls/*.h ../include/mbedtls
		-cp ./win32/*.h ../include/mbedtls

%/.created:
		-@mkdir $(@D)
		@echo "do not delete, managed directory" > $@

clean:
		-@$(LIBTOOL) --mode=clean $(RM) $(DLLS) $(DLLOBJS) >/dev/null 2>&1
		-@$(RM) $(RMFLAGS) $(BAK) $(TSKS) $(LIBS) $(CLEAN) $(XCLEAN) >/dev/null 2>&1
		-@$(RM) $(LIBOBJS) >/dev/null 2>&1

$(D_OBJ)/%$(O):		%.c
		$(CC) $(CFLAGS) -o $@ -c $<

$(D_OBJ)/%.lo:		%.c
		$(LIBTOOL) --mode=compile $(CC) $(CFLAGS) -o $@ -c $<

$(D_OBJ)/%.res:		%.rc
		$(RC) -DLIBNAME=$(LIBNAME) -DVERSION=$(VERSION) -DVERSION_1=$(VERSION_1) -DVERSION_2=$(VERSION_2) -DVERSION_3=$(VERSION_3) -fo $@ $<

$(D_OBJ)/%_res.o:	%.rc
		$(RC) -DLIBNAME=$(LIBNAME) -DVERSION=$(VERSION) -DVERSION_1=$(VERSION_1) -DVERSION_2=$(VERSION_2) -DVERSION_3=$(VERSION_3) -o $@ $<

#end
