# -*- mode: mak; indent-tabs-mode: t; tab-width: 8 -*-
# $Id: Makefile.in,v 1.17 2023/10/02 12:11:28 cvsuser Exp $
# libmbedtls makefile.
#
#
# Copyright (c) 2017 - 2024 Adam Young.
# All rights reserved.
#
# This file is part of the Midnight Commander.
#
# The Midnight Commander is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# The Midnight Commander is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# ==end==
#

@SET_MAKE@
ROOT=		@abs_top_builddir@
top_builddir=	@top_builddir@

# File extensions

E=
O=		.o
H=		.h
A=		.a
LP=		lib

CLEAN=		*.bak *~ *.BAK *.swp *.tmp core *.core a.out
XCLEAN=

# Compilers, programs

CC=		@CC@
AR=		@AR@
RANLIB=		@RANLIB@
RM=		@RM@
PERL=		@PERL@
LIBTOOL=	@LIBTOOL@
RC=		@RC@

# Configuration

ifeq ("$(BUILD_TYPE)","")	#default
BUILD_TYPE=	debug
MAKEFLAGS+=	BUILD_TYPE=debug
endif
ifneq ("$(BUILD_TYPE)","release")
RTSUFFIX=d
endif

QUIETOUT:=	>/dev/null 2>&1
ifeq ($(VERBOSE),1)
QUIETOUT:=
else ifeq ($(VERBOSE),0)
else ifeq ($(VERBOSE),)
else
$(error VERBOSE: unexpected value 0 or 1 required, $(VERBOSE) given]))
endif

# Directories

D_INC=		$(ROOT)/include
D_BIN=		$(ROOT)/bin@TOOLCHAINEXT@/$(BUILD_TYPE)
D_LIB=		$(ROOT)/lib@TOOLCHAINEXT@/$(BUILD_TYPE)
D_OBJ=		$(ROOT)/obj@TOOLCHAINEXT@/$(BUILD_TYPE)/libmbedtls

# Common flags

XFLAGS=

CFLAGS=		@CFLAGS@
ifeq (mingw,$(findstring mingw,"@TOOLCHAIN@"))
CFLAGS+=	-mpclmul -msse2 -maes
endif
CWARN=		@CWARN@
CDEBUG=		@CDEBUG@
CRELEASE=	@CRELEASE@
LDDEBUG=	@LDDEBUG@
LDRELEASE=	@LDRELEASE@

CINCLUDE=	-I. -I$(D_INC) @CINCLUDE@
ifeq (owc,$(findstring owc,"@TOOLCHAIN@"))
CINCLUDE+=	-I.\owc
endif
CEXTRA=		@DEFS@
ifeq ("$(BUILD_TYPE)","release")
CFLAGS+=	$(CRELEASE) $(CWARN) $(CINCLUDE) $(CEXTRA) $(XFLAGS)
LDFLAGS=	$(LDRELEASE) @LDFLAGS@
else
CFLAGS+=	$(CDEBUG) $(CWARN) $(CINCLUDE) $(CEXTRA) $(XFLAGS)
LDFLAGS=	$(LDDEBUG) @LDFLAGS@
endif
LDLIBS=		-L$(D_LIB) BCrypt.lib @LIBS@ @LIBM@ @EXTRALIBS@

ARFLAGS=	rcv
RMFLAGS=	-f


#########################################################################################
# Targets

MBEDCRYPTOLIB=	$(D_LIB)/$(LP)mbedcrypto_static$(A)
MBEDCRYPTODLL=	$(D_LIB)/$(LP)mbedcrypto.la

MBEDX509LIB=	$(D_LIB)/$(LP)mbedx509_static$(A)
MBEDX509DLL=	$(D_LIB)/$(LP)mbedx509.la

MBEDTLSLIB=	$(D_LIB)/$(LP)mbedtls_static$(A)
MBEDTLSDLL=	$(D_LIB)/$(LP)mbedtls.la

VERSION=	3.5.2
VERSION_1	=$(word 1,$(subst ., ,$(VERSION)))
VERSION_2	=$(word 2,$(subst ., ,$(VERSION)))
VERSION_3	=$(word 3,$(subst ., ,$(VERSION)))
VERSIONSPEC=	$(subst .,:,$(VERSION))
VERPACKED=	mbedtls-$(VERSION).gr.tgz

MBEDBASE=	./mbedtls-$(VERSION)
MBEDSRC=	$(MBEDBASE)/library
MBEDINCLUDE=	$(MBEDBASE)/include

CINCLUDE+=	-I./win32 -I$(MBEDINCLUDE)
CEXTRA+=	-DLIBMBED_WIN32 -DLIBMBED_HAVE_ZLIB
CEXTRA+=	-DMBEDTLS_EXPORTS -DKRML_VERIFIED_UINT128

VPATH+=		$(MBEDSRC)
VPATH+=		$(MBEDBASE)/programs/test
VPATH+=		./win32

#see: library/CMakelists.txt
COMMON_SOURCES=\
	constant_time.c

CRYPTO_SOURCES=\
	aes.c					\
	aesce.c 				\
	aria.c					\
	asn1parse.c				\
	asn1write.c				\
	base64.c				\
	bignum.c				\
	bignum_core.c				\
	bignum_mod.c				\
	bignum_mod_raw.c			\
	camellia.c				\
	ccm.c					\
	chacha20.c				\
	chachapoly.c				\
	cipher.c				\
	cipher_wrap.c				\
	cmac.c					\
	ctr_drbg.c				\
	des.c					\
	dhm.c					\
	ecdh.c					\
	ecdsa.c					\
	ecjpake.c				\
	ecp.c					\
	ecp_curves.c				\
	ecp_curves_new.c			\
	entropy.c				\
	entropy_poll.c				\
	error.c					\
	gcm.c					\
	hkdf.c					\
	hmac_drbg.c				\
	lmots.c					\
	lms.c					\
	md.c					\
	md5.c					\
	memory_buffer_alloc.c			\
	nist_kw.c				\
	oid.c					\
	padlock.c				\
	pem.c					\
	pk.c					\
	pk_wrap.c				\
	pkcs12.c				\
	pkcs5.c					\
	pkparse.c				\
	pkwrite.c				\
	platform.c				\
	platform_util.c				\
	poly1305.c				\
	psa_crypto.c				\
	psa_crypto_aead.c			\
	psa_crypto_cipher.c			\
	psa_crypto_client.c			\
	psa_crypto_driver_wrappers_no_static.c	\
	psa_crypto_ecp.c			\
	psa_crypto_ffdh.c			\
	psa_crypto_hash.c			\
	psa_crypto_mac.c			\
	psa_crypto_pake.c			\
	psa_crypto_rsa.c			\
	psa_crypto_se.c				\
	psa_crypto_slot_management.c		\
	psa_crypto_storage.c			\
	psa_its_file.c				\
	psa_util.c				\
	ripemd160.c				\
	rsa.c					\
	rsa_alt_helpers.c			\
	sha1.c					\
	sha256.c				\
	sha512.c				\
	sha3.c					\
	threading.c				\
	timing.c				\
	version.c				\
	version_features.c

ifneq (owc,$(findstring owc,"@TOOLCHAIN@"))
CRYPTO_SOURCES+=\
	aesni.c
endif

X509_SOURCES=\
	pkcs7.c					\
	x509.c					\
	x509_create.c				\
	x509_crl.c				\
	x509_crt.c				\
	x509_csr.c				\
	x509write.c				\
	x509write_crt.c				\
	x509write_csr.c

TLS_SOURCES=\
	debug.c					\
	mps_reader.c				\
	mps_trace.c				\
	net_sockets.c				\
	ssl_cache.c				\
	ssl_ciphersuites.c			\
	ssl_client.c				\
	ssl_cookie.c				\
	ssl_debug_helpers_generated.c		\
	ssl_msg.c				\
	ssl_ticket.c				\
	ssl_tls.c				\
	ssl_tls12_client.c			\
	ssl_tls12_server.c			\
	ssl_tls13_keys.c			\
	ssl_tls13_server.c			\
	ssl_tls13_client.c			\
	ssl_tls13_generic.c

#######
CRYPTO_LIBOBJS:=\
	$(addprefix $(D_OBJ)/,$(subst .c,$(O),$(CRYPTO_SOURCES) $(COMMON_SOURCES)))
CRYPTO_DLLOBJS:=\
	$(subst $(O),.lo,$(CRYPTO_LIBOBJS))	\
	$(D_OBJ)/crypto_globals.lo
ifeq (owc,$(findstring owc,"@TOOLCHAIN@"))
CRYPTO_LIBOBJS+=$(D_OBJ)/owc_aesni.obj
CRYPTO_DLLOBJS+=$(D_OBJ)/owc_aesni.obj
endif
ifeq ("win32","@build_os@")
ifeq (mingw,$(findstring mingw,"@TOOLCHAIN@"))
CRYPTO_DLLOBJS+=$(D_OBJ)/libmbedtls_res.o
else
CRYPTO_DLLOBJS+=$(D_OBJ)/libmbedtls.res
endif
endif

#######
X509_LIBOBJS=\
	$(addprefix $(D_OBJ)/,$(subst .c,$(O),$(X509_SOURCES) $(COMMON_SOURCES)))
X509_DLLOBJS=\
	$(subst $(O),.lo,$(X509_LIBOBJS))	\
	$(D_OBJ)/alignment_linkage.lo		\
	$(D_OBJ)/x509_globals.lo
ifeq ("win32","@build_os@")
ifeq (mingw,$(findstring mingw,"@TOOLCHAIN@"))
X509_DLLOBJS+=	$(D_OBJ)/libmbedtls_res.o
else
X509_DLLOBJS+=	$(D_OBJ)/libmbedtls.res
endif
endif

#######
TLS_LIBOBJS=\
	$(addprefix $(D_OBJ)/,$(subst .c,$(O),$(TLS_SOURCES) $(COMMON_SOURCES)))
TLS_DLLOBJS=\
	$(subst $(O),.lo,$(TLS_LIBOBJS))	\
	$(D_OBJ)/alignment_linkage.lo
ifeq ("win32","@build_os@")
ifeq (mingw,$(findstring mingw,"@TOOLCHAIN@"))
TLS_DLLOBJS+=	$(D_OBJ)/libmbedtls_res.o
else
TLS_DLLOBJS+=	$(D_OBJ)/libmbedtls.res
endif
endif

###
LIBOBJS=	$(CRYPTO_LIBOBJS)	\
		$(X509_LIBOBJS)		\
		$(TLS_LIBOBJS)

DLLOBJS=	$(CRYPTO_DLLOBJS)	\
		$(X509_DLLOBJS)		\
		$(TLS_DLLOBJS)

LIBS=		$(MBEDCRYPTOLIB)	\
		$(MBEDX509LIB)		\
		$(MBEDTLSLIB)

DLLS=		$(MBEDCRYPTODLL)	\
		$(MBEDX509DLL)		\
		$(MBEDTLSDLL)

TARGET=		mbedtls_selftest$(E)
TARGETOBJS=	$(D_OBJ)/selftest$(O)

TSKS=		$(D_BIN)/$(TARGET)
INSTALLED=


#########################################################################################
# Rules

.PHONY: 	build release debug
build:			source unpacked
unpacked:		object $(LIBS) $(DLLS) $(TSKS) installinc

release:
		$(MAKE) BUILD_TYPE=release $(filter-out release, $(MAKECMDGOALS))
debug:
		$(MAKE) BUILD_TYPE=debug $(filter-out debug, $(MAKECMDGOALS))

CEXTRA		+= -D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE

#######
$(MBEDCRYPTOLIB):	CEXTRA += -DLIBMBED_STATIC -DLIBMBEDCRYPTO_SOURCE
$(MBEDCRYPTOLIB):	$(CRYPTO_LIBOBJS)
		$(RM) $(RMFLAGS) $@ $(QUIETOUT)
		$(AR) $(ARFLAGS) $@ $^
		$(RANLIB) $@
 
ifeq (owc,$(findstring owc,"@TOOLCHAIN@"))
$(D_OBJ)/owc_aesni.obj:		owc\aesni.obj
		@cp owc\aesni.obj $(D_OBJ)\owc_aesni.obj
endif

INSTALLED+=	$(D_BIN)/libmbedcrypto.$(VERSION).dll
$(MBEDCRYPTODLL):	LIBNAME=libmbedcrypto
$(MBEDCRYPTODLL):	LIBDEF=-export-symbols win32/libmbedcrypto.def.$(VERSION)
$(MBEDCRYPTODLL):	CEXTRA += -DLIBMBED_DYNAMIC -DLIBMBEDCRYPTO_SOURCE -D_WINDLL
$(MBEDCRYPTODLL):	$(CRYPTO_DLLOBJS)
		$(LIBTOOL) --mode=link $(CC) $(LDFLAGS) -version-number $(VERSIONSPEC) \
			-rpath $(D_LIB) -bindir $(D_BIN) $(LIBDEF) -o $@ $^ $(LDLIBS)

#######
$(MBEDX509LIB):		CEXTRA += -DLIBMBED_STATIC -DLIBMBEDX509_SOURCE -DLIBMBEDX509
$(MBEDX509LIB):		$(X509_LIBOBJS)
		$(RM) $(RMFLAGS) $@ $(QUIETOUT)
		$(AR) $(ARFLAGS) $@ $^
		$(RANLIB) $@

INSTALLED+=	$(D_BIN)/libmbedx509.$(VERSION).dll
$(MBEDX509DLL):		LIBNAME=libmbedx509
$(MBEDX509DLL):		LIBDEF=-export-symbols win32/libmbedx509.def.$(VERSION)
$(MBEDX509DLL):		CEXTRA += -DLIBMBED_DYNAMIC -DLIBMBEDX509_SOURCE -D_WINDLL
$(MBEDX509DLL):		$(X509_DLLOBJS)
		$(LIBTOOL) --mode=link $(CC) $(LDFLAGS) -version-number $(VERSIONSPEC) \
			-rpath $(D_LIB) -bindir $(D_BIN) $(LIBDEF) -o $@ $^ -lmbedcrypto $(LDLIBS)

#######
$(MBEDTLSLIB):		CEXTRA += -DLIBMBED_STATIC -DLIBMBEDTLS_SOURCE
$(MBEDTLSLIB):		$(TLS_LIBOBJS)
		$(RM) $(RMFLAGS) $@ $(QUIETOUT)
		$(AR) $(ARFLAGS) $@ $^
		$(RANLIB) $@

INSTALLED+=	$(D_BIN)/libmbedtls.$(VERSION).dll
$(MBEDTLSDLL):		LIBNAME=libmbedtls
$(MBEDTLSDLL):		LIBDEF=-export-symbols win32/libmbedtls.def.$(VERSION)
$(MBEDTLSDLL):		CEXTRA += -DLIBMBED_DYNAMIC -DLIBMBEDTLS_SOURCE -DLIBMBEDTLS -D_WINDLL
$(MBEDTLSDLL):		$(TLS_DLLOBJS)
		$(LIBTOOL) --mode=link $(CC) $(LDFLAGS) -version-number $(VERSIONSPEC) \
			-rpath $(D_LIB) -bindir $(D_BIN) $(LIBDEF) -o $@ $^ -lmbedcrypto -lmbedx509 $(LDLIBS)

#######
$(D_BIN)/$(TARGET):	MAPFILE=$(basename $@).map
$(D_BIN)/$(TARGET):	$(D_OBJ)/.created $(TARGETOBJS)
		$(LIBTOOL) --mode=link $(CC) $(LDFLAGS) -o $@ $(TARGETOBJS) $(LDFLAGS) -lmbedtls -lmbedcrypto -lmbedx509 $(LDLIBS) @LDMAPFILE@

#######
source:			.unpacked.$(VERSION)
		$(MAKE) unpacked

.unpacked.$(VERSION):	$(VERPACKED)
		@echo "do not delete, managed file" > $@
		@echo "unpacking source $(VERPACKED)"
		@gzip -c -d $(VERPACKED) | tar -xvf -

.PHONY:		object
object:			$(D_OBJ)/.created

.PHONY:		installinc
installinc:		../include/.created ../include/mbedtls/.created
		@echo publishing headers ...
		-cp $(MBEDINCLUDE)/mbedtls/*.h ../include/mbedtls
		-cp ./win32/*.h ../include/mbedtls

%/.created:
		-@mkdir $(@D)
		@echo "do not delete, managed directory" > $@

clean:
		@echo $(BUILD_TYPE) clean
		-@$(LIBTOOL) --mode=clean $(RM) $(DLLS) $(DLLOBJS) $(QUIETOUT)
		-@$(RM) $(RMFLAGS) $(BAK) $(TSKS) $(INSTALLED) $(LIBS) $(CLEAN) $(XCLEAN) $(QUIETOUT)
		-@$(RM) $(LIBOBJS) $(QUIETOUT)
		-@$(RM) ../include/mbedtls/* $(QUIETOUT)

$(D_OBJ)/%$(O):		%.c
		$(CC) $(CFLAGS) -o $@ -c $<

$(D_OBJ)/%.lo:		%.c
		$(LIBTOOL) --mode=compile $(CC) $(CFLAGS) -o $@ -c $<

$(D_OBJ)/%.res:		%.rc
		$(RC) -DLIBNAME=$(LIBNAME) -DVERSION=$(VERSION) -DVERSION_1=$(VERSION_1) -DVERSION_2=$(VERSION_2) -DVERSION_3=$(VERSION_3) -fo $@ $<

$(D_OBJ)/%_res.o:	%.rc
		$(RC) -DLIBNAME=$(LIBNAME) -DVERSION=$(VERSION) -DVERSION_1=$(VERSION_1) -DVERSION_2=$(VERSION_2) -DVERSION_3=$(VERSION_3) -o $@ $<

#end
